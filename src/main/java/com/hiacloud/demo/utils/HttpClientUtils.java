package com.hiacloud.demo.utils;import java.io.IOException;import org.apache.http.HttpEntity;import org.apache.http.HttpResponse;import org.apache.http.HttpStatus;import org.apache.http.client.methods.CloseableHttpResponse;import org.apache.http.client.methods.HttpGet;import org.apache.http.client.methods.HttpPost;import org.apache.http.entity.StringEntity;import org.apache.http.impl.client.CloseableHttpClient;import org.apache.http.impl.client.HttpClientBuilder;import org.apache.http.impl.client.HttpClients;import org.apache.http.protocol.HTTP;import org.apache.http.util.EntityUtils;import net.sf.json.JSONObject;public class HttpClientUtils {		private static final String APPLICATION_JSON = "application/json";	public static JSONObject doPost(String url, JSONObject json) {		// 创建HttpClientBuilder		HttpClientBuilder httpClientBuilder = HttpClientBuilder.create();		// HttpClient		CloseableHttpClient closeableHttpClient = httpClientBuilder.build();				HttpPost httpPost = new HttpPost(url);		httpPost.addHeader(HTTP.CONN_DIRECTIVE, HTTP.CONN_CLOSE);		httpPost.addHeader(HTTP.CONTENT_TYPE, APPLICATION_JSON);				JSONObject response = null;		try {			if(null == json){				json = new JSONObject();			}			HttpEntity entity = new StringEntity(json.toString());			httpPost.setEntity(entity);			HttpResponse httpResponse = closeableHttpClient.execute(httpPost);			if (httpResponse.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {				String result = EntityUtils.toString(httpResponse.getEntity());// 返回json格式：				response = JSONObject.fromObject(result);			}			closeableHttpClient.close();		} catch (Exception e) {			e.printStackTrace();		}		return response;	}	public static String doGet(String url) {		CloseableHttpResponse httpresponse = null;		CloseableHttpClient httpClient = HttpClients.createDefault();		String surl = url.replaceAll(" ", "");		HttpGet request = new HttpGet(surl);		request.setHeader(HTTP.CONN_DIRECTIVE, HTTP.CONN_CLOSE);		String strResult1 = "";		try {			// 执行http串			// logger.info("开始执行搜索引擎接口，执行时间："+new Date());			httpresponse = httpClient.execute(request);			// logger.info("执行搜索引擎接口结束，结束时间："+new Date());			if (httpresponse.getStatusLine().getStatusCode() == 200) {				try {					// **读取服务器返回过来的json字符串数据,**/					// logger.info("开始读取搜索引擎返回的数据，读取开始时间："+new Date());					strResult1 = EntityUtils.toString(httpresponse.getEntity());				} catch (IllegalStateException e) {					e.printStackTrace();				} catch (IOException e) {					e.printStackTrace();				} finally {					httpresponse.close();				}			} else {				httpresponse.close();				return strResult1;			}		} catch (IOException e) {			e.printStackTrace();		} finally {			if (httpClient != null) {				try {					httpClient.close();				} catch (IOException e) {					e.printStackTrace();				}			}		}		return strResult1;	}}